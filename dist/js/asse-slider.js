(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  (function($, window) {
    var Slider;
    Slider = (function() {
      Slider.prototype.iScroll = null;

      Slider.prototype.numberOfSlides = null;

      Slider.prototype.currentSlide = 0;

      Slider.prototype.interval = null;

      Slider.prototype.$slider = null;

      Slider.prototype.$slideContainer = null;

      Slider.prototype.$slides = null;

      Slider.prototype.defaults = {
        autoscroll: false,
        speed: 500,
        interval: 5000,
        debug: true,
        snap: true,
        navigation: true,
        navigationTemplate: _.template('<ul class="sliderNavigation"> <% _.each(slides, function(element,index){ %> <li data-index="<%= index %>" class="slider_navigationItem fa fa-circle-o"></li> <% }); %> </ul>'),
        navigationElement: false,
        prevNextButtons: true,
        prevNextButtonsTemplate: _.template('<span class="prev fa fa-angle-left"></span> <span class="next fa fa-angle-right"></span>'),
        slideContainerSelector: '.slideContainer',
        slideSelector: 'ul.slides > li',
        inactiveSlideOpacity: null,
        slideMargin: 0
      };

      Slider.prototype.debugTemplate = _.template('<div class="debug"> <span>Slider: <%= slider_index %></span> <span># of slides: <%= number_of_slides %></span> <span>Current slide: <%= current_slide %></span> <span>Autoscroll: <%= autoscroll %></span> <span># of navigations: <%= number_of_navigations %></span> <span>Slider width: <%= slider_width %></span> </div>');

      function Slider(el, options, index) {
        if (index == null) {
          index = null;
        }
        this.debug = bind(this.debug, this);
        this.stopAutoScroll = bind(this.stopAutoScroll, this);
        this.startAutoScroll = bind(this.startAutoScroll, this);
        this.goToSlide = bind(this.goToSlide, this);
        this.prevSlide = bind(this.prevSlide, this);
        this.nextSlide = bind(this.nextSlide, this);
        this.resize = bind(this.resize, this);
        this.onBeforeScrollStart = bind(this.onBeforeScrollStart, this);
        this.onScrollEnd = bind(this.onScrollEnd, this);
        this.options = $.extend({}, this.defaults, options);
        this.$slider = $(el);
        this.$slider.data('index', index);
        this.$slider.addClass('slider_' + index);
        this.$sliderNavigation = [];
        this.$slideContainer = this.$slider.find(this.options.slideContainerSelector);
        this.$slides = this.$slideContainer.find(this.options.slideSelector);
        this.numberOfSlides = this.$slides.length;
        this.enableSlides();
        this.iScroll = new IScroll(el, {
          scrollX: true,
          scrollY: false,
          snap: this.options.snap,
          snapSpeed: 400,
          tap: true,
          momentum: false,
          eventPassthrough: false
        });
        if (this.options.autoscroll) {
          this.startAutoScroll();
        }
        if (this.options.prevNextButtons) {
          this.addPrevNextButtons();
        }
        if (this.options.navigation) {
          this.addNavigation();
        }
        this.resize();
        this.goToSlide(this.currentSlide);
        this.bindEvents();
        this.debug();
      }

      Slider.prototype.enableSlides = function() {
        return this.$slides.css({
          display: 'block'
        });
      };

      Slider.prototype.addPrevNextButtons = function() {
        return this.$slider.append(this.options.prevNextButtonsTemplate());
      };

      Slider.prototype.addNavigation = function() {
        var navigationItems, newElement, self, sliderNavigationLength;
        self = this;
        sliderNavigationLength = this.$sliderNavigation.length;
        if (this.options.navigationElement) {
          this.$sliderNavigation.push(this.options.navigationElement);
          navigationItems = this.$sliderNavigation[sliderNavigationLength].children();
          this.$slides.each(function(index, element) {
            var item;
            item = navigationItems.eq(index);
            if (item) {
              item.data('slider_index', self.$slider.data('index'));
              item.data('item_index', index);
              item.addClass('slider_navigationItem');
              return item.click(function(event) {
                self.stopAutoScroll();
                return self.goToSlide($(this).data('item_index'));
              });
            }
          });
        } else {
          newElement = this.options.navigationTemplate({
            'slides': this.$slides
          });
          this.$sliderNavigation.push($(newElement));
          this.$slider.append(this.$sliderNavigation[sliderNavigationLength]);
          this.$sliderNavigation[sliderNavigationLength].css({
            'margin-left': -this.$sliderNavigation[sliderNavigationLength].width() / 2
          });
        }
        return this.updateNavigation();
      };

      Slider.prototype.updateNavigation = function() {
        var index;
        index = this.currentSlide;
        return _.each(this.$sliderNavigation, function(element) {
          return $(element).find('.slider_navigationItem').removeClass('active').eq(index).addClass('active');
        });
      };

      Slider.prototype.updateSlides = function() {
        if (this.options.inactiveSlideOpacity) {
          this.$slides.stop().animate({
            opacity: this.options.inactiveSlideOpacity
          });
          return this.$slides.eq(this.currentSlide).stop().animate({
            opacity: '1'
          });
        }
      };

      Slider.prototype.onScrollEnd = function() {
        this.currentSlide = this.iScroll.currentPage.pageX;
        this.updateSlides();
        this.updateNavigation();
        return this.debug();
      };

      Slider.prototype.onBeforeScrollStart = function() {
        return this.stopAutoScroll();
      };

      Slider.prototype.resize = function() {
        this.stopAutoScroll();
        this.$slides.width(this.$slider.outerWidth());
        this.$slideContainer.width((this.$slides.outerWidth() + (this.options.slideMargin * 2)) * this.numberOfSlides);
        this.$slideContainer.height(this.$slider.height());
        if (this.iScroll) {
          this.iScroll.refresh();
        }
        return this.startAutoScroll();
      };

      Slider.prototype.bindEvents = function() {
        var self;
        self = this;
        this.iScroll.on('scrollEnd', this.onScrollEnd);
        this.iScroll.on('beforeScrollStart', this.onBeforeScrollStart);
        this.$slides.on('click', 'img', function() {
          return self.stopAutoScroll();
        });
        this.$slider.on('click', 'span.next', function() {
          self.stopAutoScroll();
          return self.nextSlide();
        });
        this.$slider.on('click', 'span.prev', function() {
          self.stopAutoScroll();
          return self.prevSlide();
        });
        this.$slider.on('click', 'ul.sliderNavigation li', function() {
          self.stopAutoScroll();
          return self.goToSlide($(this).data('index'));
        });
        return $(window).bind('resize', function() {
          return self.resize();

          /*
          if @resizeTo
            clearTimeout @resizeTimeout
          @resizeTimeout = setTimeout ->
          , 200
           */
        });
      };

      Slider.prototype.nextSlide = function() {
        var nextSlideIndex, self;
        self = this;
        if (this.numberOfSlides > this.currentSlide + 1) {
          nextSlideIndex = this.currentSlide + 1;
        } else {
          nextSlideIndex = 0;
        }
        return this.goToSlide(nextSlideIndex);
      };

      Slider.prototype.prevSlide = function() {
        var nextSlideIndex, self;
        self = this;
        if (this.currentSlide - 1 >= 0) {
          nextSlideIndex = this.currentSlide - 1;
        } else {
          nextSlideIndex = this.numberOfSlides - 1;
        }
        return this.goToSlide(nextSlideIndex);
      };

      Slider.prototype.goToSlide = function(index) {
        var ref;
        if (this.currentSlide !== index) {
          if ((ref = this.iScroll) != null) {
            ref.goToPage(index, 0, this.options.speed);
          }
          this.currentSlide = index;
        }
        this.updateSlides();
        return this.updateNavigation();
      };

      Slider.prototype.startAutoScroll = function() {
        return this.interval = setInterval(this.nextSlide, this.options.interval);
      };

      Slider.prototype.stopAutoScroll = function() {
        clearInterval(this.interval);
        return this.interval = null;
      };

      Slider.prototype.debug = function() {
        if (this.options.debug) {
          this.$slider.find('.debug').remove();
          return this.$slider.append(this.debugTemplate({
            'slider_index': this.$slider.data('index'),
            'number_of_slides': this.numberOfSlides,
            'current_slide': this.iScroll.currentPage.pageX,
            'autoscroll': this.interval ? 'enabled' : 'disabled',
            'number_of_navigations': this.$sliderNavigation.length,
            'slider_width': this.$slider.width()
          }));
        }
      };

      Slider.prototype.get = function(option) {
        console.log('option: ' + option + ' is ' + this.options[option]);
        return this.options[option];
      };

      Slider.prototype.set = function(option, value) {
        console.log('setting ' + option + ' to ' + value);
        this.options[option] = value;
        return this.updateSettings();
      };

      Slider.prototype.updateSettings = function() {
        if (this.options.autoscroll && !this.interval) {
          this.startAutoScroll();
        }
        if (this.options.navigationElement) {
          this.addNavigation();
        }
        return this.debug();
      };

      return Slider;

    })();
    return $.fn.extend({
      Slider: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function(index) {
          var $this, data;
          $this = $(this);
          data = $this.data('Slider');
          if (!data) {
            $this.data('Slider', (data = new Slider(this, option, index)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QTtBQUdBLFFBQUEsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLGlCQUFaO0FBQ0UsVUFBQSxJQUFDLENBQUEsYUFBRCxDQUFBLENBQUEsQ0FERjtTQUhBO2VBTUEsSUFBQyxDQUFBLEtBQUQsQ0FBQSxFQVJjO01BQUEsQ0ExVGhCLENBQUE7O29CQUFBOztRQUZGLENBQUE7V0F5VUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFMLENBQVk7QUFBQSxNQUFBLE1BQUEsRUFBUSxTQUFBLEdBQUE7QUFFbEIsWUFBQSxZQUFBO0FBQUEsUUFGbUIsdUJBQVEsNERBRTNCLENBQUE7ZUFBQSxJQUFDLENBQUEsSUFBRCxDQUFNLFNBQUMsS0FBRCxHQUFBO0FBQ0osY0FBQSxXQUFBO0FBQUEsVUFBQSxLQUFBLEdBQVEsQ0FBQSxDQUFFLElBQUYsQ0FBUixDQUFBO0FBQUEsVUFDQSxJQUFBLEdBQU8sS0FBSyxDQUFDLElBQU4sQ0FBVyxRQUFYLENBRFAsQ0FBQTtBQUdBLFVBQUEsSUFBRyxDQUFBLElBQUg7QUFDRSxZQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBWCxFQUFxQixDQUFDLElBQUEsR0FBVyxJQUFBLE1BQUEsQ0FBTyxJQUFQLEVBQVUsTUFBVixFQUFrQixLQUFsQixDQUFaLENBQXJCLENBQUEsQ0FERjtXQUhBO0FBTUEsVUFBQSxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0UsbUJBQU8sSUFBSyxDQUFBLE1BQUEsQ0FBTyxDQUFDLEtBQWIsQ0FBbUIsSUFBbkIsRUFBeUIsSUFBekIsQ0FBUCxDQURGO1dBUEk7UUFBQSxDQUFOLEVBRmtCO01BQUEsQ0FBUjtLQUFaLEVBNVVEO0VBQUEsQ0FBRCxDQUFBLENBeVZFLE1BQU0sQ0FBQyxNQXpWVCxFQXlWaUIsTUF6VmpCLENBQUEsQ0FBQTtBQUFBIiwiZmlsZSI6ImFzc2Utc2xpZGVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiI1xuIyBTbGlkZXIgalF1ZXJ5IHBsdWdpblxuIyBBdXRob3I6IFRob21hcyBLbG9rb3NjaCA8bWFpbEB0aG9tYXNrbG9rb3NjaC5jb20+XG4jXG4oKCQsIHdpbmRvdykgLT5cblxuICAjIERlZmluZSB0aGUgcGx1Z2luIGNsYXNzXG4gIGNsYXNzIFNsaWRlclxuXG4gICAgaVNjcm9sbDogbnVsbFxuICAgIG51bWJlck9mU2xpZGVzOiBudWxsXG4gICAgY3VycmVudFNsaWRlOiAwXG4gICAgaW50ZXJ2YWw6IG51bGxcblxuICAgICRzbGlkZXI6IG51bGxcbiAgICAkc2xpZGVDb250YWluZXI6IG51bGxcbiAgICAkc2xpZGVzOiBudWxsXG5cbiAgICBkZWZhdWx0czpcbiAgICAgIGF1dG9zY3JvbGw6IGZhbHNlXG4gICAgICBzcGVlZDogNTAwXG4gICAgICBpbnRlcnZhbDogNTAwMFxuICAgICAgZGVidWc6IHRydWVcbiAgICAgIHNuYXA6IHRydWVcblxuICAgICAgbmF2aWdhdGlvbjogdHJ1ZVxuICAgICAgbmF2aWdhdGlvblRlbXBsYXRlOiBfLnRlbXBsYXRlKCc8dWwgY2xhc3M9XCJzbGlkZXJOYXZpZ2F0aW9uXCI+XG4gICAgICAgIDwlIF8uZWFjaChzbGlkZXMsIGZ1bmN0aW9uKGVsZW1lbnQsaW5kZXgpeyAlPlxuICAgICAgICAgIDxsaSBkYXRhLWluZGV4PVwiPCU9IGluZGV4ICU+XCIgY2xhc3M9XCJzbGlkZXJfbmF2aWdhdGlvbkl0ZW0gZmEgZmEtY2lyY2xlLW9cIj48L2xpPlxuICAgICAgICA8JSB9KTsgJT5cbiAgICAgIDwvdWw+JylcblxuICAgICAgIyBJZiBzcGVjaWZpZWQsIHRoaXMgZWxlbWVudHMgY2hpbGRyZW4gd2lsbCByZWNlaXZlIGluZGV4IHZhbHVlcyBmb3JcbiAgICAgICMgdGhlIHNsaWRlcyBhbmQgbWF0Y2hpbmcgY2xpY2sgZXZlbnQgYmluZGluZ3NcbiAgICAgIG5hdmlnYXRpb25FbGVtZW50OiBmYWxzZVxuXG4gICAgICBwcmV2TmV4dEJ1dHRvbnM6IHRydWVcbiAgICAgIHByZXZOZXh0QnV0dG9uc1RlbXBsYXRlOiBfLnRlbXBsYXRlKCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJldiBmYSBmYS1hbmdsZS1sZWZ0XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuZXh0IGZhIGZhLWFuZ2xlLXJpZ2h0XCI+PC9zcGFuPicpXG5cbiAgICAgIHNsaWRlQ29udGFpbmVyU2VsZWN0b3I6ICcuc2xpZGVDb250YWluZXInXG4gICAgICBzbGlkZVNlbGVjdG9yOiAndWwuc2xpZGVzID4gbGknXG5cbiAgICAgICMgT3BhY2l0eSBvZiBzbGlkZXMgb3RoZXIgdGhhbiB0aGUgY3VycmVudFxuICAgICAgIyBPbmx5IGFwcGxpY2FibGUgaWYgdGhlIHNsaWRlciBlbGVtZW50IGhhcyBvdmVyZmxvdzogdmlzaWJsZVxuICAgICAgIyBhbmQgaW5hY3RpdmUgc2xpZGVzIGFyZSBzaG93biBuZXh0IHRvIHRoZSBjdXJyZW50XG4gICAgICBpbmFjdGl2ZVNsaWRlT3BhY2l0eTogbnVsbFxuXG4gICAgICAjIE1hcmdpbiBsZWZ0IGFuZCByaWdodCBvZiB0aGUgc2xpZGVzIGluIHBpeGVsc1xuICAgICAgc2xpZGVNYXJnaW46IDBcblxuXG4gICAgZGVidWdUZW1wbGF0ZTogXy50ZW1wbGF0ZSgnXG4gICAgICA8ZGl2IGNsYXNzPVwiZGVidWdcIj5cbiAgICAgICAgPHNwYW4+U2xpZGVyOiA8JT0gc2xpZGVyX2luZGV4ICU+PC9zcGFuPlxuICAgICAgICA8c3Bhbj4jIG9mIHNsaWRlczogPCU9IG51bWJlcl9vZl9zbGlkZXMgJT48L3NwYW4+XG4gICAgICAgIDxzcGFuPkN1cnJlbnQgc2xpZGU6IDwlPSBjdXJyZW50X3NsaWRlICU+PC9zcGFuPlxuICAgICAgICA8c3Bhbj5BdXRvc2Nyb2xsOiA8JT0gYXV0b3Njcm9sbCAlPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+IyBvZiBuYXZpZ2F0aW9uczogPCU9IG51bWJlcl9vZl9uYXZpZ2F0aW9ucyAlPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+U2xpZGVyIHdpZHRoOiA8JT0gc2xpZGVyX3dpZHRoICU+PC9zcGFuPlxuICAgICAgPC9kaXY+JylcblxuXG4gICAgIyBDb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yOiAoZWwsIG9wdGlvbnMsIGluZGV4ID0gbnVsbCkgLT5cblxuICAgICAgQG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQGRlZmF1bHRzLCBvcHRpb25zKVxuXG4gICAgICBAJHNsaWRlciA9ICQoZWwpXG4gICAgICBAJHNsaWRlci5kYXRhICdpbmRleCcsIGluZGV4XG4gICAgICBAJHNsaWRlci5hZGRDbGFzcyAnc2xpZGVyXycraW5kZXhcbiAgICAgIEAkc2xpZGVyTmF2aWdhdGlvbiA9IFtdXG5cbiAgICAgIEAkc2xpZGVDb250YWluZXIgPSBAJHNsaWRlci5maW5kIEBvcHRpb25zLnNsaWRlQ29udGFpbmVyU2VsZWN0b3JcbiAgICAgIEAkc2xpZGVzID0gQCRzbGlkZUNvbnRhaW5lci5maW5kIEBvcHRpb25zLnNsaWRlU2VsZWN0b3JcbiAgICAgIEBudW1iZXJPZlNsaWRlcyA9IEAkc2xpZGVzLmxlbmd0aFxuXG4gICAgICAjIEVuYWJsZSBzbGlkZXMgdHJvdWdoIENTU1xuICAgICAgQGVuYWJsZVNsaWRlcygpXG5cbiAgICAgIEBpU2Nyb2xsID0gbmV3IElTY3JvbGwgZWwsXG4gICAgICAgIHNjcm9sbFg6IHRydWVcbiAgICAgICAgc2Nyb2xsWTogZmFsc2VcbiAgICAgICAgc25hcDogQG9wdGlvbnMuc25hcFxuICAgICAgICBzbmFwU3BlZWQ6IDQwMFxuICAgICAgICB0YXA6IHRydWVcbiAgICAgICAgbW9tZW50dW06IGZhbHNlXG4gICAgICAgIGV2ZW50UGFzc3Rocm91Z2g6IGZhbHNlXG5cbiAgICAgIGlmIEBvcHRpb25zLmF1dG9zY3JvbGxcbiAgICAgICAgQHN0YXJ0QXV0b1Njcm9sbCgpXG5cbiAgICAgIGlmIEBvcHRpb25zLnByZXZOZXh0QnV0dG9uc1xuICAgICAgICBAYWRkUHJldk5leHRCdXR0b25zKClcblxuICAgICAgaWYgQG9wdGlvbnMubmF2aWdhdGlvblxuICAgICAgICBAYWRkTmF2aWdhdGlvbigpXG5cbiAgICAgIEByZXNpemUoKVxuICAgICAgQGdvVG9TbGlkZSBAY3VycmVudFNsaWRlXG4gICAgICBAYmluZEV2ZW50cygpXG4gICAgICBAZGVidWcoKVxuXG5cbiAgICAjIEVuYWJsZSBzbGlkZXMgdmlhIENTU1xuICAgIGVuYWJsZVNsaWRlczogLT5cblxuICAgICAgQCRzbGlkZXMuY3NzXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcblxuXG4gICAgIyBBZGQgcHJldiBuZXh0IGJ1dHRvbnNcbiAgICBhZGRQcmV2TmV4dEJ1dHRvbnM6IC0+XG5cbiAgICAgIEAkc2xpZGVyLmFwcGVuZCBAb3B0aW9ucy5wcmV2TmV4dEJ1dHRvbnNUZW1wbGF0ZSgpXG5cblxuICAgICMgQWRkIG5hdmlnYXRpb25cbiAgICBhZGROYXZpZ2F0aW9uOiAtPlxuXG4gICAgICBzZWxmID0gQFxuXG4gICAgICBzbGlkZXJOYXZpZ2F0aW9uTGVuZ3RoID0gQCRzbGlkZXJOYXZpZ2F0aW9uLmxlbmd0aFxuXG4gICAgICBpZiBAb3B0aW9ucy5uYXZpZ2F0aW9uRWxlbWVudFxuXG4gICAgICAgIEAkc2xpZGVyTmF2aWdhdGlvbi5wdXNoIEBvcHRpb25zLm5hdmlnYXRpb25FbGVtZW50XG4gICAgICAgIG5hdmlnYXRpb25JdGVtcyA9IEAkc2xpZGVyTmF2aWdhdGlvbltzbGlkZXJOYXZpZ2F0aW9uTGVuZ3RoXS5jaGlsZHJlbigpXG5cbiAgICAgICAgQCRzbGlkZXMuZWFjaCAoaW5kZXgsZWxlbWVudCktPlxuICAgICAgICAgIGl0ZW0gPSBuYXZpZ2F0aW9uSXRlbXMuZXEoaW5kZXgpXG4gICAgICAgICAgaWYgaXRlbVxuICAgICAgICAgICAgaXRlbS5kYXRhICdzbGlkZXJfaW5kZXgnLCBzZWxmLiRzbGlkZXIuZGF0YSAnaW5kZXgnXG4gICAgICAgICAgICBpdGVtLmRhdGEgJ2l0ZW1faW5kZXgnLCBpbmRleFxuICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyAnc2xpZGVyX25hdmlnYXRpb25JdGVtJ1xuICAgICAgICAgICAgaXRlbS5jbGljayAoZXZlbnQpLT5cbiAgICAgICAgICAgICAgc2VsZi5zdG9wQXV0b1Njcm9sbCgpXG4gICAgICAgICAgICAgIHNlbGYuZ29Ub1NsaWRlICQoQCkuZGF0YSgnaXRlbV9pbmRleCcpXG5cbiAgICAgIGVsc2VcblxuICAgICAgICAjIENyZWF0ZSBhIGpRdWVyeSBvYmplY3QgZGlyZWN0bHkgZnJvbSBzbGlkZXIgY29kZVxuICAgICAgICBuZXdFbGVtZW50ID0gQG9wdGlvbnMubmF2aWdhdGlvblRlbXBsYXRlKHsnc2xpZGVzJzogQCRzbGlkZXN9KVxuICAgICAgICBAJHNsaWRlck5hdmlnYXRpb24ucHVzaCAkKG5ld0VsZW1lbnQpXG5cbiAgICAgICAgIyBBcHBlbmQgaXQgdG8gc2xpZGVyIGVsZW1lbnRcbiAgICAgICAgQCRzbGlkZXIuYXBwZW5kIEAkc2xpZGVyTmF2aWdhdGlvbltzbGlkZXJOYXZpZ2F0aW9uTGVuZ3RoXVxuXG4gICAgICAgICMgUmVzaXplIG5hdmlnYXRpb25cbiAgICAgICAgQCRzbGlkZXJOYXZpZ2F0aW9uW3NsaWRlck5hdmlnYXRpb25MZW5ndGhdLmNzc1xuICAgICAgICAgICdtYXJnaW4tbGVmdCc6IC1AJHNsaWRlck5hdmlnYXRpb25bc2xpZGVyTmF2aWdhdGlvbkxlbmd0aF0ud2lkdGgoKSAvIDJcblxuICAgICAgQHVwZGF0ZU5hdmlnYXRpb24oKVxuXG5cbiAgICAjIFVwZGF0ZSBuYXZpZ2F0aW9uIHN0YXR1c1xuICAgIHVwZGF0ZU5hdmlnYXRpb246IC0+XG5cbiAgICAgIGluZGV4ID0gQGN1cnJlbnRTbGlkZVxuXG4gICAgICBfLmVhY2ggQCRzbGlkZXJOYXZpZ2F0aW9uLCAoZWxlbWVudCktPlxuICAgICAgICAkKGVsZW1lbnQpLmZpbmQoJy5zbGlkZXJfbmF2aWdhdGlvbkl0ZW0nKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAuZXEoaW5kZXgpLmFkZENsYXNzICdhY3RpdmUnXG5cblxuICAgIHVwZGF0ZVNsaWRlczogLT5cblxuICAgICAgIyBGYWRlIGluYWN0aXZlIHNsaWRlcyB0byBhIHNwZWNpZmljIG9wYWNpdHkgdmFsdWVcbiAgICAgIGlmIEBvcHRpb25zLmluYWN0aXZlU2xpZGVPcGFjaXR5XG5cbiAgICAgICAgQCRzbGlkZXMuc3RvcCgpLmFuaW1hdGVcbiAgICAgICAgICBvcGFjaXR5OiBAb3B0aW9ucy5pbmFjdGl2ZVNsaWRlT3BhY2l0eVxuXG4gICAgICAgIEAkc2xpZGVzLmVxKEBjdXJyZW50U2xpZGUpLnN0b3AoKS5hbmltYXRlXG4gICAgICAgICAgb3BhY2l0eTogJzEnXG5cblxuICAgICMgRXZlbnQgY2FsbGJhY2sgb24gc2Nyb2xsIGVuZFxuICAgIG9uU2Nyb2xsRW5kOiA9PlxuXG4gICAgICBAY3VycmVudFNsaWRlID0gQGlTY3JvbGwuY3VycmVudFBhZ2UucGFnZVhcbiAgICAgIEB1cGRhdGVTbGlkZXMoKVxuICAgICAgQHVwZGF0ZU5hdmlnYXRpb24oKVxuICAgICAgQGRlYnVnKClcblxuXG4gICAgIyBVc2VyIHRvdWNoZXMgdGhlIHNjcmVlbiBidXQgc2Nyb2xsaW5nIGRpZG4ndCBzdGFydCB5ZXRcbiAgICBvbkJlZm9yZVNjcm9sbFN0YXJ0OiA9PlxuXG4gICAgICBAc3RvcEF1dG9TY3JvbGwoKVxuXG5cbiAgICAjIFJlc2l6ZSBzbGlkZXJcbiAgICByZXNpemU6ID0+XG5cbiAgICAgIEBzdG9wQXV0b1Njcm9sbCgpXG5cbiAgICAgIEAkc2xpZGVzLndpZHRoIEAkc2xpZGVyLm91dGVyV2lkdGgoKVxuICAgICAgQCRzbGlkZUNvbnRhaW5lci53aWR0aCAoQCRzbGlkZXMub3V0ZXJXaWR0aCgpICsgKEBvcHRpb25zLnNsaWRlTWFyZ2luKjIpKSAqIEBudW1iZXJPZlNsaWRlc1xuICAgICAgQCRzbGlkZUNvbnRhaW5lci5oZWlnaHQgQCRzbGlkZXIuaGVpZ2h0KClcblxuICAgICAgaWYgQGlTY3JvbGwgdGhlbiBAaVNjcm9sbC5yZWZyZXNoKClcblxuICAgICAgQHN0YXJ0QXV0b1Njcm9sbCgpXG5cblxuICAgICMgQmluZCBldmVudHNcbiAgICBiaW5kRXZlbnRzOiAtPlxuXG4gICAgICBzZWxmID0gQFxuXG4gICAgICBAaVNjcm9sbC5vbiAnc2Nyb2xsRW5kJywgQG9uU2Nyb2xsRW5kXG5cbiAgICAgIEBpU2Nyb2xsLm9uICdiZWZvcmVTY3JvbGxTdGFydCcsIEBvbkJlZm9yZVNjcm9sbFN0YXJ0XG5cbiAgICAgIEAkc2xpZGVzLm9uICdjbGljaycsICdpbWcnLCAtPlxuICAgICAgICBzZWxmLnN0b3BBdXRvU2Nyb2xsKClcblxuICAgICAgQCRzbGlkZXIub24gJ2NsaWNrJywgJ3NwYW4ubmV4dCcsIC0+XG4gICAgICAgIHNlbGYuc3RvcEF1dG9TY3JvbGwoKVxuICAgICAgICBzZWxmLm5leHRTbGlkZSgpXG5cbiAgICAgIEAkc2xpZGVyLm9uICdjbGljaycsICdzcGFuLnByZXYnLCAtPlxuICAgICAgICBzZWxmLnN0b3BBdXRvU2Nyb2xsKClcbiAgICAgICAgc2VsZi5wcmV2U2xpZGUoKVxuXG4gICAgICBAJHNsaWRlci5vbiAnY2xpY2snLCAndWwuc2xpZGVyTmF2aWdhdGlvbiBsaScsIC0+XG4gICAgICAgIHNlbGYuc3RvcEF1dG9TY3JvbGwoKVxuICAgICAgICBzZWxmLmdvVG9TbGlkZSAkKEApLmRhdGEoJ2luZGV4JylcblxuICAgICAgJCh3aW5kb3cpLmJpbmQgJ3Jlc2l6ZScsIC0+XG4gICAgICAgIHNlbGYucmVzaXplKClcbiAgICAgICAgIyMjXG4gICAgICAgIGlmIEByZXNpemVUb1xuICAgICAgICAgIGNsZWFyVGltZW91dCBAcmVzaXplVGltZW91dFxuICAgICAgICBAcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQgLT5cbiAgICAgICAgLCAyMDBcbiAgICAgICAgIyMjXG5cblxuICAgICMgR28gdG8gbmV4dCBzbGlkZVxuICAgIG5leHRTbGlkZTogPT5cblxuICAgICAgc2VsZiA9IEBcblxuICAgICAgaWYgQG51bWJlck9mU2xpZGVzID4gQGN1cnJlbnRTbGlkZSArIDFcbiAgICAgICAgbmV4dFNsaWRlSW5kZXggPSBAY3VycmVudFNsaWRlKzFcbiAgICAgIGVsc2VcbiAgICAgICAgbmV4dFNsaWRlSW5kZXggPSAwXG5cbiAgICAgIEBnb1RvU2xpZGUgbmV4dFNsaWRlSW5kZXhcblxuXG4gICAgIyBHbyB0byBwcmV2aW91cyBzbGlkZVxuICAgIHByZXZTbGlkZTogPT5cblxuICAgICAgc2VsZiA9IEBcblxuICAgICAgaWYgQGN1cnJlbnRTbGlkZS0xID49IDBcbiAgICAgICAgbmV4dFNsaWRlSW5kZXggPSBAY3VycmVudFNsaWRlLTFcbiAgICAgIGVsc2VcbiAgICAgICAgbmV4dFNsaWRlSW5kZXggPSBAbnVtYmVyT2ZTbGlkZXMtMVxuXG4gICAgICBAZ29Ub1NsaWRlIG5leHRTbGlkZUluZGV4XG5cblxuICAgICMgR28gdG8gc2xpZGUgaW5kZXhcbiAgICBnb1RvU2xpZGU6IChpbmRleCk9PlxuXG4gICAgICBpZiBAY3VycmVudFNsaWRlICE9IGluZGV4XG4gICAgICAgIEBpU2Nyb2xsPy5nb1RvUGFnZSBpbmRleCwgMCwgQG9wdGlvbnMuc3BlZWRcbiAgICAgICAgQGN1cnJlbnRTbGlkZSA9IGluZGV4XG5cbiAgICAgIEB1cGRhdGVTbGlkZXMoKVxuICAgICAgQHVwZGF0ZU5hdmlnYXRpb24oKVxuXG5cbiAgICAjIFN0YXJ0IGF1dG9zY3JvbGxcbiAgICBzdGFydEF1dG9TY3JvbGw6ID0+XG5cbiAgICAgIEBpbnRlcnZhbCA9IHNldEludGVydmFsIEBuZXh0U2xpZGUsIEBvcHRpb25zLmludGVydmFsXG5cblxuICAgICMgU3RvcCBhdXRvc2Nyb2xsXG4gICAgc3RvcEF1dG9TY3JvbGw6ID0+XG5cbiAgICAgIGNsZWFySW50ZXJ2YWwgQGludGVydmFsXG4gICAgICBAaW50ZXJ2YWwgPSBudWxsXG5cblxuICAgICMgQWRkIGRlYnVnIG91dHB1dCB0byBzbGlkZXJcbiAgICBkZWJ1ZzogPT5cblxuICAgICAgaWYgQG9wdGlvbnMuZGVidWdcbiAgICAgICAgQCRzbGlkZXIuZmluZCgnLmRlYnVnJykucmVtb3ZlKClcbiAgICAgICAgQCRzbGlkZXIuYXBwZW5kIEBkZWJ1Z1RlbXBsYXRlXG4gICAgICAgICAgJ3NsaWRlcl9pbmRleCc6IEAkc2xpZGVyLmRhdGEgJ2luZGV4J1xuICAgICAgICAgICdudW1iZXJfb2Zfc2xpZGVzJzogQG51bWJlck9mU2xpZGVzXG4gICAgICAgICAgJ2N1cnJlbnRfc2xpZGUnOiBAaVNjcm9sbC5jdXJyZW50UGFnZS5wYWdlWFxuICAgICAgICAgICdhdXRvc2Nyb2xsJzogaWYgQGludGVydmFsIHRoZW4gJ2VuYWJsZWQnIGVsc2UgJ2Rpc2FibGVkJ1xuICAgICAgICAgICdudW1iZXJfb2ZfbmF2aWdhdGlvbnMnOiBAJHNsaWRlck5hdmlnYXRpb24ubGVuZ3RoXG4gICAgICAgICAgJ3NsaWRlcl93aWR0aCc6IEAkc2xpZGVyLndpZHRoKClcblxuXG4gICAgIyBQcmludCBvcHRpb24gdG8gY29uc29sZVxuICAgICMgQ2FuJ3QganVzdCByZXR1cm4gdGhlIHZhbHVlIHRvIGRlYnVnIGl0IGJlY2F1c2VcbiAgICAjIGl0IHdvdWxkIGJyZWFrIGNoYWluaW5nIHdpdGggdGhlIGpRdWVyeSBvYmplY3RcbiAgICAjIEV2ZXJ5IG1ldGhvZCBjYWxsIHJldHVybnMgYSBqUXVlcnkgb2JqZWN0XG4gICAgZ2V0OiAob3B0aW9uKSAtPlxuICAgICAgY29uc29sZS5sb2cgJ29wdGlvbjogJytvcHRpb24rJyBpcyAnK0BvcHRpb25zW29wdGlvbl1cbiAgICAgIEBvcHRpb25zW29wdGlvbl1cblxuXG4gICAgIyBTZXQgb3B0aW9uIHRvIHRoaXMgaW5zdGFuY2VzIG9wdGlvbnMgYXJyYXlcbiAgICBzZXQ6IChvcHRpb24sIHZhbHVlKSAtPlxuICAgICAgY29uc29sZS5sb2cgJ3NldHRpbmcgJytvcHRpb24rJyB0byAnK3ZhbHVlXG4gICAgICBAb3B0aW9uc1tvcHRpb25dID0gdmFsdWVcbiAgICAgIEB1cGRhdGVTZXR0aW5ncygpXG5cblxuICAgICMgVXBkYXRlIHNsaWRlciBzZXR0aW5ncyBmcm9tIG9wdGlvbnNcbiAgICB1cGRhdGVTZXR0aW5nczogLT5cblxuICAgICAgaWYgQG9wdGlvbnMuYXV0b3Njcm9sbCAmJiAhQGludGVydmFsXG4gICAgICAgIEBzdGFydEF1dG9TY3JvbGwoKVxuXG4gICAgICBpZiBAb3B0aW9ucy5uYXZpZ2F0aW9uRWxlbWVudFxuICAgICAgICBAYWRkTmF2aWdhdGlvbigpXG5cbiAgICAgIEBkZWJ1ZygpXG5cblxuXG4gICMgRGVmaW5lIHRoZSBwbHVnaW5cbiAgJC5mbi5leHRlbmQgU2xpZGVyOiAob3B0aW9uLCBhcmdzLi4uKSAtPlxuXG4gICAgQGVhY2ggKGluZGV4KS0+XG4gICAgICAkdGhpcyA9ICQoQClcbiAgICAgIGRhdGEgPSAkdGhpcy5kYXRhKCdTbGlkZXInKVxuXG4gICAgICBpZiAhZGF0YVxuICAgICAgICAkdGhpcy5kYXRhICdTbGlkZXInLCAoZGF0YSA9IG5ldyBTbGlkZXIoQCwgb3B0aW9uLCBpbmRleCkpXG5cbiAgICAgIGlmIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZydcbiAgICAgICAgcmV0dXJuIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKVxuXG5cbikgd2luZG93LmpRdWVyeSwgd2luZG93XG5cbiJdfQ==