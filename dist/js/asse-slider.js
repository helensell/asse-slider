(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  (function($, window) {
    var Slider;
    Slider = (function() {
      Slider.prototype.iScroll = null;

      Slider.prototype.numberOfSlides = null;

      Slider.prototype.currentSlide = 0;

      Slider.prototype.interval = null;

      Slider.prototype.$slider = null;

      Slider.prototype.$slideContainer = null;

      Slider.prototype.$slides = null;

      Slider.prototype.defaults = {
        autoscroll: false,
        speed: 500,
        interval: 5000,
        debug: false,
        navigation: true,
        navigationTemplate: _.template('<ul class="sliderNavigation"> <% _.each(slides, function(element,index){ %> <li data-index="<%= index %>" class="slider_navigationItem"></li> <% }); %> </ul>'),
        navigationElement: false,
        prevNextButtons: true,
        prevNextButtonsTemplate: _.template('<span class="prev fa fa-chevron-left"></span> <span class="next fa fa-chevron-right"></span>'),
        slideContainerSelector: '.slideContainer',
        slideSelector: 'ul.slides > li'
      };

      Slider.prototype.debugTemplate = _.template('<div class="debug"> <span>Slider: <%= slider_index %></span> <span># of slides: <%= number_of_slides %></span> <span>Current slide: <%= current_slide %></span> <span>Autoscroll: <%= autoscroll %></span> <span># of navigations: <%= number_of_navigations %></span> </div>');

      function Slider(el, options, index) {
        if (index == null) {
          index = null;
        }
        this.debug = bind(this.debug, this);
        this.stopAutoScroll = bind(this.stopAutoScroll, this);
        this.startAutoScroll = bind(this.startAutoScroll, this);
        this.goToSlide = bind(this.goToSlide, this);
        this.prevSlide = bind(this.prevSlide, this);
        this.nextSlide = bind(this.nextSlide, this);
        this.resize = bind(this.resize, this);
        this.onScrollEnd = bind(this.onScrollEnd, this);
        this.options = $.extend({}, this.defaults, options);
        this.$slider = $(el);
        this.$slider.data('index', index);
        this.$slider.addClass('slider_' + index);
        this.$sliderNavigation = [];
        this.$slideContainer = this.$slider.find(this.options.slideContainerSelector);
        this.$slides = this.$slideContainer.find(this.options.slideSelector);
        this.numberOfSlides = this.$slides.length;
        this.enableSlides();
        this.resize();
        this.iScroll = new IScroll(el, {
          scrollX: true,
          scrollY: false,
          snap: true,
          snapSpeed: 400,
          tap: true,
          momentum: false,
          eventPassthrough: false
        });
        if (this.options.autoscroll) {
          this.startAutoScroll();
        }
        if (this.options.prevNextButtons) {
          this.addPrevNextButtons();
        }
        if (this.options.navigation) {
          this.addNavigation();
        }
        this.goToSlide(this.currentSlide);
        this.bindEvents();
        this.debug();
      }

      Slider.prototype.enableSlides = function() {
        return this.$slides.css({
          display: 'block'
        });
      };

      Slider.prototype.addPrevNextButtons = function() {
        return this.$slider.append(this.options.prevNextButtonsTemplate());
      };

      Slider.prototype.addNavigation = function() {
        var navigationItems, newElement, self, sliderNavigationLength;
        self = this;
        sliderNavigationLength = this.$sliderNavigation.length;
        if (this.options.navigationElement) {
          this.$sliderNavigation.push(this.options.navigationElement);
          navigationItems = this.$sliderNavigation[sliderNavigationLength].children();
          this.$slides.each(function(index, element) {
            var item;
            item = navigationItems.eq(index);
            if (item) {
              item.data('slider_index', self.$slider.data('index'));
              item.data('item_index', index);
              item.addClass('slider_navigationItem');
              return item.click(function(event) {
                self.stopAutoScroll();
                return self.goToSlide($(this).data('item_index'));
              });
            }
          });
        } else {
          newElement = this.options.navigationTemplate({
            'slides': this.$slides
          });
          this.$sliderNavigation.push($(newElement));
          this.$slider.append(this.$sliderNavigation[sliderNavigationLength]);
          this.$sliderNavigation[sliderNavigationLength].css({
            'margin-left': -this.$sliderNavigation[sliderNavigationLength].width() / 2
          });
        }
        return this.updateNavigation();
      };

      Slider.prototype.updateNavigation = function() {
        var index;
        index = this.currentSlide;
        return _.each(this.$sliderNavigation, function(element) {
          return $(element).find('.slider_navigationItem').removeClass('active').eq(index).addClass('active');
        });
      };

      Slider.prototype.onScrollEnd = function() {
        return this.debug();
      };

      Slider.prototype.resize = function() {
        this.stopAutoScroll();
        this.$slides.width(this.$slider.width());
        this.$slideContainer.width(this.$slider.width() * this.numberOfSlides);
        this.$slideContainer.height(this.$slider.height());
        this.$slider.height(this.$slides.first().height());
        if (this.iScroll) {
          this.iScroll.refresh();
        }
        return this.startAutoScroll();
      };

      Slider.prototype.bindEvents = function() {
        var self;
        self = this;
        this.iScroll.on('scrollEnd', this.onScrollEnd);
        this.$slides.on('click', 'img', function() {
          return self.stopAutoScroll();
        });
        this.$slider.on('click', 'span.next', function() {
          self.stopAutoScroll();
          return self.nextSlide();
        });
        this.$slider.on('click', 'span.prev', function() {
          self.stopAutoScroll();
          return self.prevSlide();
        });
        this.$slider.on('click', 'ul.sliderNavigation li', function() {
          self.stopAutoScroll();
          return self.goToSlide($(this).data('index'));
        });
        return $(window).bind('resizeEnd', function() {
          return setTimeout(function() {
            return self.resize();
          }, 0);
        });
      };

      Slider.prototype.nextSlide = function() {
        var nextSlideIndex, self;
        self = this;
        if (this.numberOfSlides > this.currentSlide + 1) {
          nextSlideIndex = this.currentSlide + 1;
        } else {
          nextSlideIndex = 0;
        }
        return this.goToSlide(nextSlideIndex);
      };

      Slider.prototype.prevSlide = function() {
        var nextSlideIndex, self;
        self = this;
        if (this.currentSlide - 1 >= 0) {
          nextSlideIndex = this.currentSlide - 1;
        } else {
          nextSlideIndex = this.numberOfSlides - 1;
        }
        return this.goToSlide(nextSlideIndex);
      };

      Slider.prototype.goToSlide = function(index) {
        var ref;
        if (this.currentSlide !== index) {
          if ((ref = this.iScroll) != null) {
            ref.goToPage(index, 0, this.options.speed);
          }
          this.currentSlide = index;
        }
        return this.updateNavigation();
      };

      Slider.prototype.startAutoScroll = function() {
        return this.interval = setInterval(this.nextSlide, this.options.interval);
      };

      Slider.prototype.stopAutoScroll = function() {
        clearInterval(this.interval);
        return this.interval = null;
      };

      Slider.prototype.debug = function() {
        if (this.options.debug) {
          this.$slider.find('.debug').remove();
          return this.$slider.append(this.debugTemplate({
            'slider_index': this.$slider.data('index'),
            'number_of_slides': this.numberOfSlides,
            'current_slide': this.iScroll.currentPage.pageX,
            'autoscroll': this.interval ? 'enabled' : 'disabled',
            'number_of_navigations': this.$sliderNavigation.length
          }));
        }
      };

      Slider.prototype.get = function(option) {
        console.log('option: ' + option + ' is ' + this.options[option]);
        return this.options[option];
      };

      Slider.prototype.set = function(option, value) {
        console.log('setting ' + option + ' to ' + value);
        this.options[option] = value;
        return this.updateSettings();
      };

      Slider.prototype.updateSettings = function() {
        if (this.options.autoscroll && !this.interval) {
          this.startAutoScroll();
        }
        if (this.options.navigationElement) {
          this.addNavigation();
        }
        return this.debug();
      };

      return Slider;

    })();
    return $.fn.extend({
      Slider: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function(index) {
          var $this, data;
          $this = $(this);
          data = $this.data('Slider');
          if (!data) {
            $this.data('Slider', (data = new Slider(this, option, index)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);

//# sourceMappingURL=data:application/json;base64,